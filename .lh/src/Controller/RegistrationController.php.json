{
    "sourceFile": "src/Controller/RegistrationController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1674825126944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1674825141359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     #[Route('/register', name: 'app_register')]\n     public function register(Request $request, UserPasswordHasherInterface $userPasswordHasher, UserAuthenticatorInterface $userAuthenticator, UserAuthenticator $authenticator, EntityManagerInterface $entityManager): Response\n     {\n         $user = new User();\n-        $form = $this->createForm(RegistrationFormType::class, $user);\n+        $form = $this->createForm(RegistrationFormType::class, $user,MailerInterface $mailer);\n         $form->handleRequest($request);\n \n         if ($form->isSubmitted() && $form->isValid()) {\n             // encode the plain password\n"
                },
                {
                    "date": 1674825166755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,16 +12,18 @@\n use Symfony\\Component\\PasswordHasher\\Hasher\\UserPasswordHasherInterface;\n use Symfony\\Component\\Routing\\Annotation\\Route;\n use Symfony\\Component\\Security\\Http\\Authentication\\UserAuthenticatorInterface;\n use Symfony\\Contracts\\Translation\\TranslatorInterface;\n+use Symfony\\Component\\Mailer\\MailerInterface;\n+use Symfony\\Component\\Mime\\Email;\n \n class RegistrationController extends AbstractController\n {\n     #[Route('/register', name: 'app_register')]\n     public function register(Request $request, UserPasswordHasherInterface $userPasswordHasher, UserAuthenticatorInterface $userAuthenticator, UserAuthenticator $authenticator, EntityManagerInterface $entityManager): Response\n     {\n         $user = new User();\n-        $form = $this->createForm(RegistrationFormType::class, $user,MailerInterface $mailer);\n+        $form = $this->createForm(RegistrationFormType::class, $user, MailerInterface $mailer);\n         $form->handleRequest($request);\n \n         if ($form->isSubmitted() && $form->isValid()) {\n             // encode the plain password\n"
                },
                {
                    "date": 1677508012249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,19 +11,16 @@\n use Symfony\\Component\\HttpFoundation\\Response;\n use Symfony\\Component\\PasswordHasher\\Hasher\\UserPasswordHasherInterface;\n use Symfony\\Component\\Routing\\Annotation\\Route;\n use Symfony\\Component\\Security\\Http\\Authentication\\UserAuthenticatorInterface;\n-use Symfony\\Contracts\\Translation\\TranslatorInterface;\n-use Symfony\\Component\\Mailer\\MailerInterface;\n-use Symfony\\Component\\Mime\\Email;\n \n class RegistrationController extends AbstractController\n {\n     #[Route('/register', name: 'app_register')]\n     public function register(Request $request, UserPasswordHasherInterface $userPasswordHasher, UserAuthenticatorInterface $userAuthenticator, UserAuthenticator $authenticator, EntityManagerInterface $entityManager): Response\n     {\n         $user = new User();\n-        $form = $this->createForm(RegistrationFormType::class, $user, MailerInterface $mailer);\n+        $form = $this->createForm(RegistrationFormType::class, $user);\n         $form->handleRequest($request);\n \n         if ($form->isSubmitted() && $form->isValid()) {\n             // encode the plain password\n@@ -35,26 +32,12 @@\n             );\n \n             $entityManager->persist($user);\n             $entityManager->flush();\n+            $this->addFlash('success', 'Inscription éffectué avec succès! , veuillez contacter l\\'administrateur\n+             pour l\\'attribution de vos doits d\\'accès');\n+            #return $this->redirectToRoute('EnregistrementSucces');\n             // do anything else you need here, like send an email\n-            $email = (new Email())\n-            ->from('hello@example.com')\n-            ->to('you@example.com')\n-            //->cc('cc@example.com')\n-            //->bcc('bcc@example.com')\n-            //->replyTo('fabien@example.com')\n-            //->priority(Email::PRIORITY_HIGH)\n-            ->subject('Time for Symfony Mailer!')\n-            ->text('Sending emails is fun again!')\n-            ->html('<p>See Twig integration for better HTML integration!</p>');\n-\n-        $mailer->send($email);\n-            return $userAuthenticator->authenticateUser(\n-                $user,\n-                $authenticator,\n-                $request\n-            );\n         }\n \n         return $this->render('registration/register.html.twig', [\n             'registrationForm' => $form->createView(),\n"
                },
                {
                    "date": 1677508315228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n             );\n \n             $entityManager->persist($user);\n             $entityManager->flush();\n-            $this->addFlash('success', 'Inscription éffectué avec succès! , veuillez contacter l\\'administrateur\n+            $this->addFlash('success', 'veuillez contacter l\\'administrateur\n              pour l\\'attribution de vos doits d\\'accès');\n             #return $this->redirectToRoute('EnregistrementSucces');\n             // do anything else you need here, like send an email\n         }\n"
                },
                {
                    "date": 1677509059559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,13 +29,12 @@\n                     $user,\n                     $form->get('plainPassword')->getData()\n                 )\n             );\n-\n             $entityManager->persist($user);\n             $entityManager->flush();\n             $this->addFlash('success', 'veuillez contacter l\\'administrateur\n-             pour l\\'attribution de vos doits d\\'accès');\n+             pour l\\'attribution de vos droits d\\'accès');\n             #return $this->redirectToRoute('EnregistrementSucces');\n             // do anything else you need here, like send an email\n         }\n \n"
                },
                {
                    "date": 1677510328971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n                 )\n             );\n             $entityManager->persist($user);\n             $entityManager->flush();\n-            $this->addFlash('success', 'veuillez contacter l\\'administrateur\n+            $this->addFlash('success', 'Inscription effectué avec succèss. veuillez contacter l\\'administrateur\n              pour l\\'attribution de vos droits d\\'accès');\n             #return $this->redirectToRoute('EnregistrementSucces');\n             // do anything else you need here, like send an email\n         }\n"
                },
                {
                    "date": 1703466070723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,8 +29,9 @@\n                     $user,\n                     $form->get('plainPassword')->getData()\n                 )\n             );\n+            \n             $entityManager->persist($user);\n             $entityManager->flush();\n             $this->addFlash('success', 'Inscription effectué avec succèss. veuillez contacter l\\'administrateur\n              pour l\\'attribution de vos droits d\\'accès');\n"
                },
                {
                    "date": 1703466134444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n                     $user,\n                     $form->get('plainPassword')->getData()\n                 )\n             );\n-            \n+            $user->setNombreDossier(0);\n             $entityManager->persist($user);\n             $entityManager->flush();\n             $this->addFlash('success', 'Inscription effectué avec succèss. veuillez contacter l\\'administrateur\n              pour l\\'attribution de vos droits d\\'accès');\n"
                }
            ],
            "date": 1674825126944,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Controller;\n\nuse App\\Entity\\User;\nuse App\\Form\\RegistrationFormType;\nuse App\\Security\\UserAuthenticator;\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\PasswordHasher\\Hasher\\UserPasswordHasherInterface;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\Security\\Http\\Authentication\\UserAuthenticatorInterface;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\nclass RegistrationController extends AbstractController\n{\n    #[Route('/register', name: 'app_register')]\n    public function register(Request $request, UserPasswordHasherInterface $userPasswordHasher, UserAuthenticatorInterface $userAuthenticator, UserAuthenticator $authenticator, EntityManagerInterface $entityManager): Response\n    {\n        $user = new User();\n        $form = $this->createForm(RegistrationFormType::class, $user);\n        $form->handleRequest($request);\n\n        if ($form->isSubmitted() && $form->isValid()) {\n            // encode the plain password\n            $user->setPassword(\n                $userPasswordHasher->hashPassword(\n                    $user,\n                    $form->get('plainPassword')->getData()\n                )\n            );\n\n            $entityManager->persist($user);\n            $entityManager->flush();\n            // do anything else you need here, like send an email\n            $email = (new Email())\n            ->from('hello@example.com')\n            ->to('you@example.com')\n            //->cc('cc@example.com')\n            //->bcc('bcc@example.com')\n            //->replyTo('fabien@example.com')\n            //->priority(Email::PRIORITY_HIGH)\n            ->subject('Time for Symfony Mailer!')\n            ->text('Sending emails is fun again!')\n            ->html('<p>See Twig integration for better HTML integration!</p>');\n\n        $mailer->send($email);\n            return $userAuthenticator->authenticateUser(\n                $user,\n                $authenticator,\n                $request\n            );\n        }\n\n        return $this->render('registration/register.html.twig', [\n            'registrationForm' => $form->createView(),\n        ]);\n    }\n}\n"
        }
    ]
}