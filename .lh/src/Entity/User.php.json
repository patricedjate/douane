{
    "sourceFile": "src/Entity/User.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1674457528542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1674457602452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,12 +38,12 @@\n     #[ORM\\Column(length: 255)]\n     private ?string $contact = null;\n \n     #[ORM\\Column]\n-    private ?\\DateTimeImmutable $date = null;\n-    public function __construct(): ?int\n+    private $date;\n+    public function __construct()\n     {\n-        return $this->id;\n+         $this->date = new \\DateTimeImmutable();\n     }\n     public function getId(): ?int\n     {\n         return $this->id;\n"
                },
                {
                    "date": 1674457633764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,12 +38,12 @@\n     #[ORM\\Column(length: 255)]\n     private ?string $contact = null;\n \n     #[ORM\\Column]\n-    private $date;\n+    private ?\\DateTimeImmutable $date = null;\n     public function __construct()\n     {\n-         $this->date = new \\DateTimeImmutable();\n+        $this->date = new \\DateTimeImmutable();\n     }\n     public function getId(): ?int\n     {\n         return $this->id;\n"
                },
                {
                    "date": 1674461817724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n use Symfony\\Component\\Security\\Core\\User\\UserInterface;\n \n #[ORM\\Entity(repositoryClass: UserRepository::class)]\n #[UniqueEntity(fields: ['email'], message: 'There is already an account with this email')]\n+#[Vich\\Uploadable]\n class User implements UserInterface, PasswordAuthenticatedUserInterface\n {\n     #[ORM\\Id]\n     #[ORM\\GeneratedValue]\n"
                },
                {
                    "date": 1674461823478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,18 @@\n <?php\n \n namespace App\\Entity;\n \n+use Vich\\Uploadable;\n+use Doctrine\\ORM\\Mapping as ORM;\n use App\\Repository\\UserRepository;\n-use Doctrine\\ORM\\Mapping as ORM;\n+use Symfony\\Component\\Security\\Core\\User\\UserInterface;\n use Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntity;\n use Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface;\n-use Symfony\\Component\\Security\\Core\\User\\UserInterface;\n \n #[ORM\\Entity(repositoryClass: UserRepository::class)]\n #[UniqueEntity(fields: ['email'], message: 'There is already an account with this email')]\n-#[Vich\\Uploadable]\n+#[Uploadable]\n class User implements UserInterface, PasswordAuthenticatedUserInterface\n {\n     #[ORM\\Id]\n     #[ORM\\GeneratedValue]\n"
                },
                {
                    "date": 1674461852763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,8 @@\n use Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface;\n \n #[ORM\\Entity(repositoryClass: UserRepository::class)]\n #[UniqueEntity(fields: ['email'], message: 'There is already an account with this email')]\n-#[Uploadable]\n class User implements UserInterface, PasswordAuthenticatedUserInterface\n {\n     #[ORM\\Id]\n     #[ORM\\GeneratedValue]\n"
                },
                {
                    "date": 1674461896301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,10 @@\n <?php\n \n namespace App\\Entity;\n \n-use Vich\\Uploadable;\n+use Symfony\\Component\\HttpFoundation\\File\\File;\n+use Vich\\UploaderBundle\\Mapping\\Annotation as Vich;\n use Doctrine\\ORM\\Mapping as ORM;\n use App\\Repository\\UserRepository;\n use Symfony\\Component\\Security\\Core\\User\\UserInterface;\n use Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntity;\n"
                },
                {
                    "date": 1674461913641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n use Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface;\n \n #[ORM\\Entity(repositoryClass: UserRepository::class)]\n #[UniqueEntity(fields: ['email'], message: 'There is already an account with this email')]\n+#[Vich\\Uploadable]\n class User implements UserInterface, PasswordAuthenticatedUserInterface\n {\n     #[ORM\\Id]\n     #[ORM\\GeneratedValue]\n"
                },
                {
                    "date": 1674461967581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,14 @@\n     #[ORM\\Id]\n     #[ORM\\GeneratedValue]\n     #[ORM\\Column]\n     private ?int $id = null;\n+    #[Vich\\UploadableField(mapping: 'products', fileNameProperty: 'imageName', size: 'imageSize')]\n+    private ?File $imageFile = null;\n \n+    #[ORM\\Column(type: 'string')]\n+    private ?string $imageName = null;\n+\n     #[ORM\\Column(length: 180, unique: true)]\n     private ?string $email = null;\n \n     #[ORM\\Column]\n"
                },
                {
                    "date": 1674462128131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,33 @@\n     public function getId(): ?int\n     {\n         return $this->id;\n     }\n+    public function setImageFile(?File $imageFile = null): void\n+    {\n+        $this->imageFile = $imageFile;\n \n+        if (null !== $imageFile) {\n+            // It is required that at least one field changes if you are using doctrine\n+            // otherwise the event listeners won't be called and the file is lost\n+            $this->date = new \\DateTimeImmutable();\n+        }\n+    }\n+\n+    public function getImageFile(): ?File\n+    {\n+        return $this->imageFile;\n+    }\n+\n+    public function setImageName(?string $imageName): void\n+    {\n+        $this->imageName = $imageName;\n+    }\n+\n+    public function getImageName(): ?string\n+    {\n+        return $this->imageName;\n+    }\n     public function getEmail(): ?string\n     {\n         return $this->email;\n     }\n"
                },
                {
                    "date": 1674462837696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n     {\n         return $this->imageFile;\n     }\n \n-    public function setImageName(?string $imageName): void\n+    public function setImageName(?array $imageName): void\n     {\n         $this->imageName = $imageName;\n     }\n \n"
                },
                {
                    "date": 1674462866005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n     {\n         return $this->imageFile;\n     }\n \n-    public function setImageName(?array $imageName): void\n+    public function setImageName(?string $imageName): void\n     {\n         $this->imageName = $imageName;\n     }\n \n"
                },
                {
                    "date": 1674463308675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,31 +1,23 @@\n <?php\n \n namespace App\\Entity;\n \n-use Symfony\\Component\\HttpFoundation\\File\\File;\n-use Vich\\UploaderBundle\\Mapping\\Annotation as Vich;\n+use App\\Repository\\UserRepository;\n use Doctrine\\ORM\\Mapping as ORM;\n-use App\\Repository\\UserRepository;\n-use Symfony\\Component\\Security\\Core\\User\\UserInterface;\n use Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntity;\n use Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface;\n+use Symfony\\Component\\Security\\Core\\User\\UserInterface;\n \n #[ORM\\Entity(repositoryClass: UserRepository::class)]\n #[UniqueEntity(fields: ['email'], message: 'There is already an account with this email')]\n-#[Vich\\Uploadable]\n class User implements UserInterface, PasswordAuthenticatedUserInterface\n {\n     #[ORM\\Id]\n     #[ORM\\GeneratedValue]\n     #[ORM\\Column]\n     private ?int $id = null;\n-    #[Vich\\UploadableField(mapping: 'products', fileNameProperty: 'imageName', size: 'imageSize')]\n-    private ?File $imageFile = null;\n \n-    #[ORM\\Column(type: 'string')]\n-    private ?string $imageName = null;\n-\n     #[ORM\\Column(length: 180, unique: true)]\n     private ?string $email = null;\n \n     #[ORM\\Column]\n@@ -55,33 +47,9 @@\n     public function getId(): ?int\n     {\n         return $this->id;\n     }\n-    public function setImageFile(?File $imageFile = null): void\n-    {\n-        $this->imageFile = $imageFile;\n \n-        if (null !== $imageFile) {\n-            // It is required that at least one field changes if you are using doctrine\n-            // otherwise the event listeners won't be called and the file is lost\n-            $this->date = new \\DateTimeImmutable();\n-        }\n-    }\n-\n-    public function getImageFile(): ?File\n-    {\n-        return $this->imageFile;\n-    }\n-\n-    public function setImageName(?string $imageName): void\n-    {\n-        $this->imageName = $imageName;\n-    }\n-\n-    public function getImageName(): ?string\n-    {\n-        return $this->imageName;\n-    }\n     public function getEmail(): ?string\n     {\n         return $this->email;\n     }\n"
                },
                {
                    "date": 1676992629140,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,19 @@\n <?php\n \n namespace App\\Entity;\n \n+use App\\Entity\\Fiche;\n+use App\\Entity\\RapportEmpotage;\n+use Doctrine\\ORM\\Mapping as ORM;\n use App\\Repository\\UserRepository;\n-use Doctrine\\ORM\\Mapping as ORM;\n+use Doctrine\\Common\\Collections\\Collection;\n+use Doctrine\\Common\\Collections\\ArrayCollection;\n+use Symfony\\Component\\Security\\Core\\User\\UserInterface;\n use Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntity;\n use Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface;\n-use Symfony\\Component\\Security\\Core\\User\\UserInterface;\n+use Vich\\UploaderBundle\\Mapping\\Annotation as Vich;\n+use Symfony\\Component\\HttpFoundation\\File\\File;\n \n #[ORM\\Entity(repositoryClass: UserRepository::class)]\n #[UniqueEntity(fields: ['email'], message: 'There is already an account with this email')]\n class User implements UserInterface, PasswordAuthenticatedUserInterface\n@@ -15,9 +21,10 @@\n     #[ORM\\Id]\n     #[ORM\\GeneratedValue]\n     #[ORM\\Column]\n     private ?int $id = null;\n-\n+    #[Vich\\UploadableField(mapping: 'douane', fileNameProperty: 'imageName')]\n+  \n     #[ORM\\Column(length: 180, unique: true)]\n     private ?string $email = null;\n \n     #[ORM\\Column]\n@@ -39,16 +46,29 @@\n     private ?string $contact = null;\n \n     #[ORM\\Column]\n     private ?\\DateTimeImmutable $date = null;\n+\n+    #[ORM\\OneToMany(mappedBy: 'user', targetEntity: Fiche::class)]\n+    private Collection $fiches;\n+\n+    #[ORM\\OneToMany(mappedBy: 'user', targetEntity: RapportEmpotage::class)]\n+    private Collection $rapportEmpotages;\n+\n+    #[ORM\\Column(nullable: true)]\n+    private ?int $NombreDossier = null;\n+    #[ORM\\Column(nullable: true)]\n     public function __construct()\n     {\n         $this->date = new \\DateTimeImmutable();\n+        $this->fiches = new ArrayCollection();\n+        $this->rapportEmpotages = new ArrayCollection();\n     }\n     public function getId(): ?int\n     {\n         return $this->id;\n     }\n+  \n \n     public function getEmail(): ?string\n     {\n         return $this->email;\n@@ -160,5 +180,89 @@\n         $this->date = $date;\n \n         return $this;\n     }\n+\n+    /**\n+     * @return Collection<int, Fiche>\n+     */\n+    public function getFiches(): Collection\n+    {\n+        return $this->fiches;\n+    }\n+\n+    public function addFich(Fiche $fich): self\n+    {\n+        if (!$this->fiches->contains($fich)) {\n+            $this->fiches->add($fich);\n+            $fich->setUser($this);\n+        }\n+\n+        return $this;\n+    }\n+\n+    public function removeFich(Fiche $fich): self\n+    {\n+        if ($this->fiches->removeElement($fich)) {\n+            // set the owning side to null (unless already changed)\n+            if ($fich->getUser() === $this) {\n+                $fich->setUser(null);\n+            }\n+        }\n+\n+        return $this;\n+    }\n+\n+    /**\n+     * @return Collection<int, RapportEmpotage>\n+     */\n+    public function getRapportEmpotages(): Collection\n+    {\n+        return $this->rapportEmpotages;\n+    }\n+\n+    public function addRapportEmpotage(RapportEmpotage $rapportEmpotage): self\n+    {\n+        if (!$this->rapportEmpotages->contains($rapportEmpotage)) {\n+            $this->rapportEmpotages->add($rapportEmpotage);\n+            $rapportEmpotage->setUser($this);\n+        }\n+\n+        return $this;\n+    }\n+\n+    public function removeRapportEmpotage(RapportEmpotage $rapportEmpotage): self\n+    {\n+        if ($this->rapportEmpotages->removeElement($rapportEmpotage)) {\n+            // set the owning side to null (unless already changed)\n+            if ($rapportEmpotage->getUser() === $this) {\n+                $rapportEmpotage->setUser(null);\n+            }\n+        }\n+\n+        return $this;\n+    }\n+\n+    public function getNombreDossier(): ?int\n+    {\n+        return $this->NombreDossier;\n+    }\n+\n+    public function setNombreDossier(?int $NombreDossier): self\n+    {\n+        (string) $this->NombreDossier = $NombreDossier;\n+\n+        return $this;\n+    }\n+    \n+\n+    public function __toString()\n+    {\n+        return $this->NombreDossier;\n+    }\n+\n+   \n+\n+ \n+\n+    \n }\n"
                }
            ],
            "date": 1674457528542,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntity;\nuse Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\n\n#[ORM\\Entity(repositoryClass: UserRepository::class)]\n#[UniqueEntity(fields: ['email'], message: 'There is already an account with this email')]\nclass User implements UserInterface, PasswordAuthenticatedUserInterface\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n\n    #[ORM\\Column(length: 180, unique: true)]\n    private ?string $email = null;\n\n    #[ORM\\Column]\n    private array $roles = [];\n\n    /**\n     * @var string The hashed password\n     */\n    #[ORM\\Column]\n    private ?string $password = null;\n\n    #[ORM\\Column(length: 255)]\n    private ?string $nom = null;\n\n    #[ORM\\Column(length: 255)]\n    private ?string $prenom = null;\n\n    #[ORM\\Column(length: 255)]\n    private ?string $contact = null;\n\n    #[ORM\\Column]\n    private ?\\DateTimeImmutable $date = null;\n    public function __construct(): ?int\n    {\n        return $this->id;\n    }\n    public function getId(): ?int\n    {\n        return $this->id;\n    }\n\n    public function getEmail(): ?string\n    {\n        return $this->email;\n    }\n\n    public function setEmail(string $email): self\n    {\n        $this->email = $email;\n\n        return $this;\n    }\n\n    /**\n     * A visual identifier that represents this user.\n     *\n     * @see UserInterface\n     */\n    public function getUserIdentifier(): string\n    {\n        return (string) $this->email;\n    }\n\n    /**\n     * @see UserInterface\n     */\n    public function getRoles(): array\n    {\n        $roles = $this->roles;\n        // guarantee every user at least has ROLE_USER\n        $roles[] = 'ROLE_USER';\n\n        return array_unique($roles);\n    }\n\n    public function setRoles(array $roles): self\n    {\n        $this->roles = $roles;\n\n        return $this;\n    }\n\n    /**\n     * @see PasswordAuthenticatedUserInterface\n     */\n    public function getPassword(): string\n    {\n        return $this->password;\n    }\n\n    public function setPassword(string $password): self\n    {\n        $this->password = $password;\n\n        return $this;\n    }\n\n    /**\n     * @see UserInterface\n     */\n    public function eraseCredentials()\n    {\n        // If you store any temporary, sensitive data on the user, clear it here\n        // $this->plainPassword = null;\n    }\n\n    public function getNom(): ?string\n    {\n        return $this->nom;\n    }\n\n    public function setNom(string $nom): self\n    {\n        $this->nom = $nom;\n\n        return $this;\n    }\n\n    public function getPrenom(): ?string\n    {\n        return $this->prenom;\n    }\n\n    public function setPrenom(string $prenom): self\n    {\n        $this->prenom = $prenom;\n\n        return $this;\n    }\n\n    public function getContact(): ?string\n    {\n        return $this->contact;\n    }\n\n    public function setContact(string $contact): self\n    {\n        $this->contact = $contact;\n\n        return $this;\n    }\n\n    public function getDate(): ?\\DateTimeImmutable\n    {\n        return $this->date;\n    }\n\n    public function setDate(\\DateTimeImmutable $date): self\n    {\n        $this->date = $date;\n\n        return $this;\n    }\n}\n"
        }
    ]
}