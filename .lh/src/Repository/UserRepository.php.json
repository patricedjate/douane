{
    "sourceFile": "src/Repository/UserRepository.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1676895921248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1676895921248,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\User;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\Persistence\\ManagerRegistry;\nuse Symfony\\Component\\Security\\Core\\Exception\\UnsupportedUserException;\nuse Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface;\nuse Symfony\\Component\\Security\\Core\\User\\PasswordUpgraderInterface;\n\n/**\n * @extends ServiceEntityRepository<User>\n *\n * @method User|null find($id, $lockMode = null, $lockVersion = null)\n * @method User|null findOneBy(array $criteria, array $orderBy = null)\n * @method User[]    findAll()\n * @method User[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n */\nclass UserRepository extends ServiceEntityRepository implements PasswordUpgraderInterface\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, User::class);\n    }\n\n    public function save(User $entity, bool $flush = false): void\n    {\n        $this->getEntityManager()->persist($entity);\n\n        if ($flush) {\n            $this->getEntityManager()->flush();\n        }\n    }\n\n    public function remove(User $entity, bool $flush = false): void\n    {\n        $this->getEntityManager()->remove($entity);\n\n        if ($flush) {\n            $this->getEntityManager()->flush();\n        }\n    }\n\n    /**\n     * Used to upgrade (rehash) the user's password automatically over time.\n     */\n    public function upgradePassword(PasswordAuthenticatedUserInterface $user, string $newHashedPassword): void\n    {\n        if (!$user instanceof User) {\n            throw new UnsupportedUserException(sprintf('Instances of \"%s\" are not supported.', \\get_class($user)));\n        }\n\n        $user->setPassword($newHashedPassword);\n\n        $this->save($user, true);\n    }\n\n    //    /**\n//     * @return User[] Returns an array of User objects\n//     */\n//    public function findByExampleField($value): array\n//    {\n//        return $this->createQueryBuilder('u')\n//            ->andWhere('u.exampleField = :val')\n//            ->setParameter('val', $value)\n//            ->orderBy('u.id', 'ASC')\n//            ->setMaxResults(10)\n//            ->getQuery()\n//            ->getResult()\n//        ;\n//    }\npublic function findOneByNombreDossier() : ?user\n    {\n        return $this->createQueryBuilder('a')\n        ->andWhere('a.roles LIKE :role')\n        ->setParameter('role', '%\"'.'ROLE_AGENT'.'\"%')\n        ->orderBy('a.NombreDossier', 'ASC')\n        ->setMaxResults(1)\n        ->getQuery()\n        ->getOneOrNullResult()\n       ;\n   }\n   \n   public function findNbre()\n   {\n       return $this->createQueryBuilder('r')\n             ->andWhere('r.roles LIKE :role')\n            ->setParameter('role', '%\"'.'ROLE_AGENT'.'\"%')\n           ->getQuery()\n           ->getResult();\n   }\n   public function findAllUserByRoles()\n   {\n        return $this->createQueryBuilder('r')\n            ->andWhere('r.roles LIKE :role')\n            ->setParameter('role', '%\"' . 'ROLE_AGENT' . '\"%')\n            ->getQuery()\n            ->getResult();\n   }\n   public function findAllUserByChef()\n   {\n        return $this->createQueryBuilder('r')\n            ->andWhere('r.roles LIKE :role')\n            ->setParameter('role', '%\"' . 'ROLE_CHEF' . '\"%')\n            ->getQuery()\n            ->getResult();\n   }\n}"
        }
    ]
}